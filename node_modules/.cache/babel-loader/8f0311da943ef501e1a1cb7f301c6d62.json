{"ast":null,"code":"var _jsxFileName = \"/Users/saran/Documents/Google-Maps---React-js/src/containers/Main.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getPredictions } from '../actions';\nimport { getLocation } from '../actions';\nimport AutoCompleteInput from '../components/AutoCompleteInput';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSelect = item => {\n      let value = {\n        placeId: item.place_id,\n        userSearch: this.state.input\n      };\n      this.props.dispatch(getLocation(value));\n      this.setState({\n        input: item.description\n      });\n    };\n\n    this.onFocus = () => {\n      if (this.props.searchHistory.length && !this.state.input.length) {\n        this.setState({\n          showHistory: true\n        });\n      }\n\n      if (this.state.input.length) {\n        this.setState({\n          showPrediction: true\n        });\n        this.props.dispatch(getPredictions(this.state.input));\n      }\n    };\n\n    this.onBlur = () => {\n      this.setState({\n        showHistory: false,\n        showPrediction: false\n      });\n    };\n\n    this.selectFromHistory = value => {\n      this.inputHandleChange(value);\n    };\n\n    this.state = {\n      input: \"\",\n      showHistory: false,\n      showPrediction: true\n    };\n    this.inputHandleChange = this.inputHandleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      userHistory: this.props.searchHistory\n    });\n  }\n\n  inputHandleChange(value) {\n    this.setState({\n      input: value\n    });\n    this.props.dispatch(getPredictions(value));\n\n    if (value.length) {\n      this.setState({\n        showHistory: false,\n        showPrediction: true\n      });\n    } else {\n      this.setState({\n        showHistory: true,\n        showPrediction: false\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          predictions = _this$props.predictions,\n          location = _this$props.location;\n    return React.createElement(AutoCompleteInput, {\n      userHistory: this.props.searchHistory,\n      location: location,\n      onSelect: this.onSelect,\n      onFocus: this.onFocus,\n      sugesstion: predictions.items,\n      value: this.state.input,\n      onChange: value => this.inputHandleChange(value),\n      showHistory: this.state.showHistory,\n      onBlur: this.onBlur,\n      selectFromHistory: this.selectFromHistory,\n      showPrediction: this.state.showPrediction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => state;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch: action => dispatch(action)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","map":{"version":3,"sources":["/Users/saran/Documents/Google-Maps---React-js/src/containers/Main.js"],"names":["React","Component","connect","getPredictions","getLocation","AutoCompleteInput","Main","constructor","props","onSelect","item","value","placeId","place_id","userSearch","state","input","dispatch","setState","description","onFocus","searchHistory","length","showHistory","showPrediction","onBlur","selectFromHistory","inputHandleChange","bind","componentDidMount","userHistory","render","predictions","location","items","mapStateToProps","mapDispatchToProps","action"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { getPredictions } from '../actions'\nimport { getLocation } from '../actions'\nimport AutoCompleteInput from '../components/AutoCompleteInput'\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {input:\"\",showHistory: false,showPrediction: true}\n    this.inputHandleChange = this.inputHandleChange.bind(this);\n  }\n  componentDidMount(){\n    this.setState({\n      userHistory: this.props.searchHistory    \n    });\n\n  }\n\n  inputHandleChange(value) {\n    this.setState({input:value});\n    this.props.dispatch(getPredictions(value));\n    if(value.length) {\n      this.setState({showHistory: false,showPrediction:true});\n    }\n    else {\n      this.setState({showHistory: true,showPrediction:false});\n    }\n  }\n   onSelect = (item) => {\n    let value = {placeId: item.place_id,userSearch:this.state.input}\n    this.props.dispatch(getLocation(value));\n    this.setState({input: item.description,});\n  }\n  onFocus= () => {\n    if(this.props.searchHistory.length && !this.state.input.length) {\n      this.setState({showHistory: true});\n    }\n    if(this.state.input.length) {\n      this.setState({showPrediction:true})\n      this.props.dispatch(getPredictions(this.state.input));\n    }\n  }\n  onBlur = () => {\n    this.setState({showHistory: false,showPrediction: false});\n  }\n  selectFromHistory = (value) => {\n    this.inputHandleChange(value);\n\n  }\n  render() {\n    const { predictions,location } = this.props\n    return (\n      <AutoCompleteInput \n        userHistory={this.props.searchHistory} \n        location={location} \n        onSelect={this.onSelect} \n        onFocus={this.onFocus} \n        sugesstion={predictions.items} \n        value={this.state.input}  \n        onChange={(value) => this.inputHandleChange(value)}\n        showHistory={this.state.showHistory}\n        onBlur={this.onBlur}\n        selectFromHistory = {this.selectFromHistory}\n        showPrediction = {this.state.showPrediction}\n        />\n    )\n  }\n}\n\nconst mapStateToProps = (state) => (\n    state\n)\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatch: (action) => dispatch(action),\n};\n}\n\nexport default connect (mapStateToProps,mapDispatchToProps )(Main);\n"]},"metadata":{},"sourceType":"module"}