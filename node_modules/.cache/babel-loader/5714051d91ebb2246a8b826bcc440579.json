{"ast":null,"code":"var _jsxFileName = \"/Users/saran/Documents/Google-Maps---React-js/src/components/PredictionList.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Paper from \"@material-ui/core/Paper\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper\n  },\n  nested: {\n    paddingLeft: theme.spacing(4)\n  }\n}));\n\nconst ListPrediction = ({\n  predictions,\n  onSelect,\n  location\n}) => {\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, predictions.length ? React.createElement(Paper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(List, {\n    component: \"nav\",\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, predictions.map(item => React.createElement(ListItem, {\n    key: item.place_id,\n    onClick: e => {\n      onSelect(item);\n      e.stopPropagation();\n    },\n    button: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"location_on\"), React.createElement(ListItemText, {\n    primary: item.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }))))) : null);\n};\n\nListPrediction.propTypes = {\n  predictions: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  location: PropTypes.object.isRequired\n};\nexport default ListPrediction;","map":{"version":3,"sources":["/Users/saran/Documents/Google-Maps---React-js/src/components/PredictionList.js"],"names":["React","PropTypes","makeStyles","List","ListItem","ListItemText","Paper","useStyles","theme","root","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","ListPrediction","predictions","onSelect","location","classes","length","map","item","place_id","e","stopPropagation","description","propTypes","array","isRequired","func","object"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAEM,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,UAAd,CAAyBC;AADtC,GADiC;AAIvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,WAAW,EAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd;AADP;AAJ+B,CAAZ,CAAD,CAA5B;;AAQA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,KAAyC;AAC9D,QAAMC,OAAO,GAAGd,SAAS,EAAzB;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGW,WAAW,CAACI,MAAZ,GACC,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,KAAhB;AAAsB,IAAA,SAAS,EAAED,OAAO,CAACZ,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,WAAW,CAACK,GAAZ,CAAiBC,IAAD,IACf,oBAAC,QAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,QADZ;AAEE,IAAA,OAAO,EAAGC,CAAD,IAAO;AACdP,MAAAA,QAAQ,CAACK,IAAD,CAAR;AACAE,MAAAA,CAAC,CAACC,eAAF;AACD,KALH;AAME,IAAA,MAAM,MANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE;AAAG,IAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARF,EASE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEH,IAAI,CAACI,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADD,CADH,CADF,CADD,GAkBG,IAnBN,CADF;AAuBD,CAzBD;;AA2BAX,cAAc,CAACY,SAAf,GAA2B;AACzBX,EAAAA,WAAW,EAAEjB,SAAS,CAAC6B,KAAV,CAAgBC,UADJ;AAEzBZ,EAAAA,QAAQ,EAAElB,SAAS,CAAC+B,IAAV,CAAeD,UAFA;AAGzBX,EAAAA,QAAQ,EAAEnB,SAAS,CAACgC,MAAV,CAAiBF;AAHF,CAA3B;AAMA,eAAed,cAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n}));\nconst ListPrediction = ({ predictions, onSelect, location }) => {\n  const classes = useStyles();\n  return (\n    <div>\n      {predictions.length ? (\n        <Paper>\n          <List component=\"nav\" className={classes.root}>\n            {predictions.map((item) => (\n              <ListItem\n                key={item.place_id}\n                onClick={(e) => {\n                  onSelect(item);\n                  e.stopPropagation();\n                }}\n                button\n              >\n                <i className=\"material-icons\">location_on</i>\n                <ListItemText primary={item.description} />\n              </ListItem>\n            ))}\n          </List>\n        </Paper>\n      ) : null}\n    </div>\n  );\n};\n\nListPrediction.propTypes = {\n  predictions: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default ListPrediction;\n"]},"metadata":{},"sourceType":"module"}