{"ast":null,"code":"var _jsxFileName = \"/Users/saran/Documents/Google-Maps---React-js/src/containers/Main.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPredictions } from \"../actions\";\nimport { getLocation } from \"../actions\";\nimport AutoComplete from \"../components/AutoComplete\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSelect = item => {\n      let value = {\n        placeId: item.place_id,\n        userSearch: this.state.input\n      };\n      this.props.dispatch(getLocation(value));\n      this.setState({\n        input: item.description\n      });\n    };\n\n    this.onFocus = () => {\n      if (this.props.searchHistory.length && !this.state.input.length) {\n        this.setState({\n          showHistory: true\n        });\n      }\n\n      if (this.state.input.length) {\n        this.setState({\n          showPrediction: true\n        });\n        this.props.dispatch(getPredictions(this.state.input));\n      }\n    };\n\n    this.onBlur = () => {\n      this.setState({\n        showHistory: false,\n        showPrediction: false\n      });\n    };\n\n    this.selectFromHistory = value => {\n      this.inputHandleChange(value);\n    };\n\n    this.state = {\n      input: \"\",\n      showHistory: false,\n      showPrediction: true\n    };\n    this.inputHandleChange = this.inputHandleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      userHistory: this.props.searchHistory\n    });\n  }\n\n  inputHandleChange(value) {\n    this.setState({\n      input: value\n    });\n    this.props.dispatch(getPredictions(value));\n\n    if (value.length) {\n      this.setState({\n        showHistory: false,\n        showPrediction: true\n      });\n    } else {\n      this.setState({\n        showHistory: true,\n        showPrediction: false\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          predictions = _this$props.predictions,\n          location = _this$props.location;\n    return React.createElement(AutoCAutoCompleteompleteInput, {\n      userHistory: this.props.searchHistory,\n      location: location,\n      onSelect: this.onSelect,\n      onFocus: this.onFocus,\n      sugesstion: predictions.items,\n      value: this.state.input,\n      onChange: value => this.inputHandleChange(value),\n      showHistory: this.state.showHistory,\n      onBlur: this.onBlur,\n      selectFromHistory: this.selectFromHistory,\n      showPrediction: this.state.showPrediction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => state;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch: action => dispatch(action)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","map":{"version":3,"sources":["/Users/saran/Documents/Google-Maps---React-js/src/containers/Main.js"],"names":["React","Component","connect","getPredictions","getLocation","AutoComplete","Main","constructor","props","onSelect","item","value","placeId","place_id","userSearch","state","input","dispatch","setState","description","onFocus","searchHistory","length","showHistory","showPrediction","onBlur","selectFromHistory","inputHandleChange","bind","componentDidMount","userHistory","render","predictions","location","items","mapStateToProps","mapDispatchToProps","action"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPredictions } from \"../actions\";\nimport { getLocation } from \"../actions\";\nimport AutoComplete from \"../components/AutoComplete\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { input: \"\", showHistory: false, showPrediction: true };\n    this.inputHandleChange = this.inputHandleChange.bind(this);\n  }\n  componentDidMount() {\n    this.setState({\n      userHistory: this.props.searchHistory,\n    });\n  }\n\n  inputHandleChange(value) {\n    this.setState({ input: value });\n    this.props.dispatch(getPredictions(value));\n    if (value.length) {\n      this.setState({ showHistory: false, showPrediction: true });\n    } else {\n      this.setState({ showHistory: true, showPrediction: false });\n    }\n  }\n  onSelect = (item) => {\n    let value = { placeId: item.place_id, userSearch: this.state.input };\n    this.props.dispatch(getLocation(value));\n    this.setState({ input: item.description });\n  };\n  onFocus = () => {\n    if (this.props.searchHistory.length && !this.state.input.length) {\n      this.setState({ showHistory: true });\n    }\n    if (this.state.input.length) {\n      this.setState({ showPrediction: true });\n      this.props.dispatch(getPredictions(this.state.input));\n    }\n  };\n  onBlur = () => {\n    this.setState({ showHistory: false, showPrediction: false });\n  };\n  selectFromHistory = (value) => {\n    this.inputHandleChange(value);\n  };\n  render() {\n    const { predictions, location } = this.props;\n    return (\n      <AutoCAutoCompleteompleteInput\n        userHistory={this.props.searchHistory}\n        location={location}\n        onSelect={this.onSelect}\n        onFocus={this.onFocus}\n        sugesstion={predictions.items}\n        value={this.state.input}\n        onChange={(value) => this.inputHandleChange(value)}\n        showHistory={this.state.showHistory}\n        onBlur={this.onBlur}\n        selectFromHistory={this.selectFromHistory}\n        showPrediction={this.state.showPrediction}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => state;\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatch: (action) => dispatch(action),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n"]},"metadata":{},"sourceType":"module"}