{"ast":null,"code":"export const service = new window.google.maps.places.AutocompleteService();\nconst geocoder = new window.google.maps.Geocoder();\nexport const setLocation = location => ({\n  type: \"SET_LOCATION\",\n  location: location\n});\nexport const requestPost = () => ({\n  type: \"REQUEST_POST\"\n});\nexport const receivedPost = _data => ({\n  type: \"RECEIVE_POST\",\n  data: _data\n});\nexport const resetPredictions = () => ({\n  type: \"RESET_PREDICTIONS\"\n});\nexport const addUserSearchHistory = value => ({\n  type: \"ADD_USER_SEARCH_HISTORY\",\n  value: value\n});\nexport const getLocation = value => dispatch => {\n  dispatch(addUserSearchHistory(value.userSearch));\n  const request = {\n    placeId: value.placeId\n  };\n  geocoder.geocode(request, function (res) {\n    const location = res[0] || null;\n\n    if (location !== null) {\n      dispatch(setLocation(location));\n    }\n  });\n};\nexport const getPredictions = str => dispatch => {\n  if (!str.length) {\n    dispatch(resetPredictions());\n    return;\n  }\n\n  dispatch(requestPost());\n  var request = {\n    input: str\n  };\n  service.getPlacePredictions(request, function (data) {\n    const _data = data || [];\n\n    dispatch(receivedPost(_data));\n  });\n};","map":{"version":3,"sources":["/Users/saran/Documents/Google-Maps---React-js/src/actions/index.js"],"names":["service","window","google","maps","places","AutocompleteService","geocoder","Geocoder","setLocation","location","type","requestPost","receivedPost","_data","data","resetPredictions","addUserSearchHistory","value","getLocation","dispatch","userSearch","request","placeId","geocode","res","getPredictions","str","length","input","getPlacePredictions"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,MAAnB,CAA0BC,mBAA9B,EAAhB;AACP,MAAMC,QAAQ,GAAG,IAAIL,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBI,QAAvB,EAAjB;AACA,OAAO,MAAMC,WAAW,GAAIC,QAAD,KAAe;AACxCC,EAAAA,IAAI,EAAE,cADkC;AAExCD,EAAAA,QAAQ,EAAEA;AAF8B,CAAf,CAApB;AAIP,OAAO,MAAME,WAAW,GAAG,OAAO;AAChCD,EAAAA,IAAI,EAAE;AAD0B,CAAP,CAApB;AAGP,OAAO,MAAME,YAAY,GAAIC,KAAD,KAAY;AACtCH,EAAAA,IAAI,EAAE,cADgC;AAEtCI,EAAAA,IAAI,EAAED;AAFgC,CAAZ,CAArB;AAIP,OAAO,MAAME,gBAAgB,GAAG,OAAO;AACrCL,EAAAA,IAAI,EAAE;AAD+B,CAAP,CAAzB;AAGP,OAAO,MAAMM,oBAAoB,GAAIC,KAAD,KAAY;AAC9CP,EAAAA,IAAI,EAAE,yBADwC;AAE9CO,EAAAA,KAAK,EAAEA;AAFuC,CAAZ,CAA7B;AAKP,OAAO,MAAMC,WAAW,GAAID,KAAD,IAAYE,QAAD,IAAc;AAClDA,EAAAA,QAAQ,CAACH,oBAAoB,CAACC,KAAK,CAACG,UAAP,CAArB,CAAR;AACA,QAAMC,OAAO,GAAG;AACdC,IAAAA,OAAO,EAAEL,KAAK,CAACK;AADD,GAAhB;AAGAhB,EAAAA,QAAQ,CAACiB,OAAT,CAAiBF,OAAjB,EAA0B,UAAUG,GAAV,EAAe;AACvC,UAAMf,QAAQ,GAAGe,GAAG,CAAC,CAAD,CAAH,IAAU,IAA3B;;AACA,QAAIf,QAAQ,KAAK,IAAjB,EAAuB;AACrBU,MAAAA,QAAQ,CAACX,WAAW,CAACC,QAAD,CAAZ,CAAR;AACD;AACF,GALD;AAMD,CAXM;AAaP,OAAO,MAAMgB,cAAc,GAAIC,GAAD,IAAUP,QAAD,IAAc;AACnD,MAAI,CAACO,GAAG,CAACC,MAAT,EAAiB;AACfR,IAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACA;AACD;;AACDI,EAAAA,QAAQ,CAACR,WAAW,EAAZ,CAAR;AACA,MAAIU,OAAO,GAAG;AACZO,IAAAA,KAAK,EAAEF;AADK,GAAd;AAGA1B,EAAAA,OAAO,CAAC6B,mBAAR,CAA4BR,OAA5B,EAAqC,UAAUP,IAAV,EAAgB;AACnD,UAAMD,KAAK,GAAGC,IAAI,IAAI,EAAtB;;AACAK,IAAAA,QAAQ,CAACP,YAAY,CAACC,KAAD,CAAb,CAAR;AACD,GAHD;AAID,CAbM","sourcesContent":["export const service = new window.google.maps.places.AutocompleteService();\nconst geocoder = new window.google.maps.Geocoder();\nexport const setLocation = (location) => ({\n  type: \"SET_LOCATION\",\n  location: location,\n});\nexport const requestPost = () => ({\n  type: \"REQUEST_POST\",\n});\nexport const receivedPost = (_data) => ({\n  type: \"RECEIVE_POST\",\n  data: _data,\n});\nexport const resetPredictions = () => ({\n  type: \"RESET_PREDICTIONS\",\n});\nexport const addUserSearchHistory = (value) => ({\n  type: \"ADD_USER_SEARCH_HISTORY\",\n  value: value,\n});\n\nexport const getLocation = (value) => (dispatch) => {\n  dispatch(addUserSearchHistory(value.userSearch));\n  const request = {\n    placeId: value.placeId,\n  };\n  geocoder.geocode(request, function (res) {\n    const location = res[0] || null;\n    if (location !== null) {\n      dispatch(setLocation(location));\n    }\n  });\n};\n\nexport const getPredictions = (str) => (dispatch) => {\n  if (!str.length) {\n    dispatch(resetPredictions());\n    return;\n  }\n  dispatch(requestPost());\n  var request = {\n    input: str,\n  };\n  service.getPlacePredictions(request, function (data) {\n    const _data = data || [];\n    dispatch(receivedPost(_data));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}